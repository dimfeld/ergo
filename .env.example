DATABASE_URL=postgresql://ergo_admin:SOME_PASSWORD@localhost/ergo
REDIS_URL=redis://localhost:6379/0

COOKIE_SIGNING_KEY="an^cn3*c3prinzcw^nyuo8za3y8o!30s"

DATABASE_ROLE_WEB_PASSWORD=blCIT&RVtlrcw3brc3l82
DATABASE_ROLE_BACKEND_PASSWORD=vk6cra3loz83brczakarc38ba2
DATABASE_ROLE_ENQUEUER_PASSWORD=CVT@KirlbCRv7liz3v3trz7is

# A hack until we have a real admin user system
ADMIN_USER_ID=usrxqp_b0PPQYeVTsi2isVaNQ

# Local org and user IDs for bootstrapping data from filesystem.
# Generate your own using `cargo run dev id new`
ORG_ID=orgAQTDDPTrTwarDfD2-hGgkA
ORG_NAME="Org"
USER_ID=usrxqp_b0PPQYeVTsi2isVaNQ
USER_NAME="Me"
USER_EMAIL="me@example.com"

# Generate using `cargo run dev hash-password "the password"
PASSWORD_HASH='hash_passwd output'

# For Discord notifications. Everything after the "api/webhooks/" portion.
DISCORD_WEBHOOK_URL="key/key"

# Discord notification tests use this webhook. The tests do nothing if this is not present.
# TEST_DISCORD_WEBHOOK_URL="key/key"

# After bootstrapping, generate using `cargo run --bin make_api_key`
API_KEY='the api key'

# Connection information for test docker Postgres instance.
# Use scripts/start_test_postgres_docker.sh to run the container.
TEST_DATABASE_HOST=localhost
TEST_DATABASE_PORT=6500
TEST_DATABASE_USER=postgres
TEST_DATABASE_PASSWORD=bjlsefna3i7yznw3cl8
TEST_DATABASE_CONTAINER_NAME=postgres-ergo-test

# Connection information for test Redis instance.
# This default connects to the same Redis server, but a different database.
TEST_REDIS_URL=redis://localhost:6379/1

ACTION_CATEGORY_ID_GENERAL=acatfsv3sdb6QBaKh1oem7zw8Q

# Only needed if you install the youtube-dl action.
YOUTUBE_DL_OUTPUT_DIR=/home/me/video/youtube

# Set these to true to skip the queues for inputs and actions.
# This can help speed up testing.
IMMEDIATE_INPUTS=false
IMMEDIATE_ACTIONS=false
